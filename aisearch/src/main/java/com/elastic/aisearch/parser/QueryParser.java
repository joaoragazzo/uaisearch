/* QueryParser.java */
/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
package com.elastic.aisearch.parser;

import java.io.StringReader;
import java.util.*;
import lombok.Getter;

public class QueryParser implements QueryParserConstants {

    @Getter
    public class QueryNode {
        private String shouldContent = "";

        private List<String> mustNotContent = new ArrayList<>();
        private List<String> mustInContent = new ArrayList<>();

        private List<String> mustTitle = new ArrayList<>();
        private List<String> mustNotTitle = new ArrayList<>();

        private String minDate = "";
        private String maxDate = "";
        private String eqDate = "";

        private String minReadingTime = "";
        private String maxReadingTime = "";
        private String eqReadingTime = "";

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("<b>shouldContent:</b> ").append(shouldContent).append("</br>");

            sb.append("<b>mustNotContent:</b> </br>");
            for (String s : mustNotContent) {
                sb.append("  - ").append(s).append("</br>");
            }

            sb.append("<b>mustInContent:</b> </br>");
            for (String s : mustInContent) {
                sb.append("  - ").append(s).append("</br>");
            }

            sb.append("</br>");

            sb.append("<b>mustTitle:</b> ").append("</br>");
            for (String s : mustTitle) {
                sb.append("  - ").append(s).append("</br>");
            }
            sb.append("<b>mustNotTitle:</b> ")  .append("</br>");
            for (String s : mustNotTitle) {
                sb.append("  - ").append(s).append("</br>");
            }

            sb.append("</br>");

            sb.append("<b>minDate:</b> ").append(minDate).append("</br>");
            sb.append("<b>maxDate:</b> ").append(maxDate).append("</br>");
            sb.append("<b>eqDate:</b> ").append(eqDate).append("</br>");

            sb.append("</br>");

            sb.append("<b>minReadingTime:</b> ").append(minReadingTime).append("</br>");
            sb.append("<b>maxReadingTime:</b> ").append(maxReadingTime).append("</br>");
            sb.append("<b>eqReadingTime:</b> ").append(eqReadingTime).append("</br>");

            return sb.toString();
        }

    }

    public QueryNode node = new QueryNode();

    public QueryNode parseQuery(String query) throws ParseException {
        ReInit(new StringReader(query));
        Start();
        return node;
    }

  final public void Start() throws ParseException {Token word, quoted;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WORD:{
        word = jj_consume_token(WORD);
this.node.shouldContent += word.image + " ";
        break;
        }
      case QUOTED:{
        quoted = jj_consume_token(QUOTED);
this.node.mustInContent.add(quoted.image);
        break;
        }
      case READING_TIME:
      case CREATED_AT:
      case IN_TITLE:
      case NOT_IN_TITLE:{
        Filter();
        break;
        }
      case NUMBER:{
        word = jj_consume_token(NUMBER);
this.node.shouldContent += word.image + " ";
        break;
        }
      case NEGATED_WORD:{
        word = jj_consume_token(NEGATED_WORD);
this.node.mustNotContent.add(word.image.substring(1));
        break;
        }
      case NEGATED_QUOTED:{
        word = jj_consume_token(NEGATED_QUOTED);
String quotedValue = word.image.substring(1);
            this.node.mustNotContent.add(quotedValue);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case READING_TIME:
      case CREATED_AT:
      case IN_TITLE:
      case NOT_IN_TITLE:
      case NEGATED_QUOTED:
      case NEGATED_WORD:
      case NUMBER:
      case QUOTED:
      case WORD:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
}

  final public void Filter() throws ParseException {Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CREATED_AT:{
      jj_consume_token(CREATED_AT);
      DateFilter();
      break;
      }
    case READING_TIME:{
      jj_consume_token(READING_TIME);
      ReadingTimeFilter();
      break;
      }
    case IN_TITLE:{
      jj_consume_token(IN_TITLE);
      InTitleFilter(true);
      break;
      }
    case NOT_IN_TITLE:{
      jj_consume_token(NOT_IN_TITLE);
      InTitleFilter(false);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void DateFilter() throws ParseException {Token d1, d2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:{
      jj_consume_token(GT);
      d1 = jj_consume_token(DATE);
this.node.minDate = d1.image;
      break;
      }
    case LT:{
      jj_consume_token(LT);
      d1 = jj_consume_token(DATE);
this.node.maxDate = d1.image;
      break;
      }
    case DATE:{
      d1 = jj_consume_token(DATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RANGE_DOTS:{
        jj_consume_token(RANGE_DOTS);
        d2 = jj_consume_token(DATE);
this.node.minDate = d1.image;
                    this.node.maxDate = d2.image;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
if(this.node.minDate.equals("")) {
                    this.node.eqDate = d1.image;
                }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ReadingTimeFilter() throws ParseException {Token t1, t2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:{
      jj_consume_token(GT);
      t1 = jj_consume_token(NUMBER);
this.node.minReadingTime = t1.image;
      break;
      }
    case LT:{
      jj_consume_token(LT);
      t1 = jj_consume_token(NUMBER);
this.node.maxReadingTime = t1.image;
      break;
      }
    case NUMBER:{
      t1 = jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RANGE_DOTS:{
        jj_consume_token(RANGE_DOTS);
        t2 = jj_consume_token(NUMBER);
this.node.minReadingTime = t1.image;
                    this.node.maxReadingTime = t2.image;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
if(this.node.minReadingTime.equals("")) {
                    this.node.eqReadingTime = t1.image;
                }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void InTitleFilter(boolean must) throws ParseException {Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WORD:{
      t1 = jj_consume_token(WORD);
if (must)
                this.node.mustTitle.add(t1.image);
            else
                this.node.mustNotTitle.add(t1.image);
      break;
      }
    case QUOTED:{
      t1 = jj_consume_token(QUOTED);
if (must)
                this.node.mustTitle.add(t1.image);
            else
                this.node.mustNotTitle.add(t1.image);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public QueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xd66c0,0xd66c0,0x6c0,0x8000,0x21800,0x8000,0x11800,0xc0000,};
	}

  /** Constructor with InputStream. */
  public QueryParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QueryParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new QueryParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public QueryParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new QueryParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new QueryParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public QueryParser(QueryParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(QueryParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[20];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 8; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 20; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
