options {
    STATIC = false;
    IGNORE_CASE = false;
    LOOKAHEAD = 3;
}

PARSER_BEGIN(QueryParser)
package com.elastic.aisearch.parser;

import java.io.StringReader;
import java.util.*;
import lombok.Getter;

public class QueryParser {

    @Getter
    public class QueryNode {
        private String shouldContent = "";

        private List<String> mustNotContent = new ArrayList<>();
        private List<String> mustInContent = new ArrayList<>();

        private List<String> mustTitle = new ArrayList<>();
        private List<String> mustNotTitle = new ArrayList<>();

        private String minDate = "";
        private String maxDate = "";
        private String eqDate = "";

        private String minReadingTime = "";
        private String maxReadingTime = "";
        private String eqReadingTime = "";

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("<b>shouldContent:</b> ").append(shouldContent).append("</br>");

            sb.append("<b>mustNotContent:</b> </br>");
            for (String s : mustNotContent) {
                sb.append("  - ").append(s).append("</br>");
            }

            sb.append("<b>mustInContent:</b> </br>");
            for (String s : mustInContent) {
                sb.append("  - ").append(s).append("</br>");
            }
            
            sb.append("</br>");

            sb.append("<b>mustTitle:</b> ").append("</br>");
            for (String s : mustTitle) {
                sb.append("  - ").append(s).append("</br>");
            }
            sb.append("<b>mustNotTitle:</b> ")  .append("</br>");
            for (String s : mustNotTitle) {
                sb.append("  - ").append(s).append("</br>");
            }

            sb.append("</br>");

            sb.append("<b>minDate:</b> ").append(minDate).append("</br>");
            sb.append("<b>maxDate:</b> ").append(maxDate).append("</br>");
            sb.append("<b>eqDate:</b> ").append(eqDate).append("</br>");

            sb.append("</br>");

            sb.append("<b>minReadingTime:</b> ").append(minReadingTime).append("</br>");
            sb.append("<b>maxReadingTime:</b> ").append(maxReadingTime).append("</br>");
            sb.append("<b>eqReadingTime:</b> ").append(eqReadingTime).append("</br>");

            return sb.toString();
        }
    }

    public QueryNode node = new QueryNode();

    public QueryNode parseQuery(String query) throws ParseException {
        ReInit(new StringReader(query));
        Start();
        return node;
    }
}
PARSER_END(QueryParser)

SKIP : {
      " " 
    | "\t" 
    | "\r" 
    | "\n"
}

// Tokens específicos precisam vir ANTES dos tokens genéricos
TOKEN : {
      < OR: "OR" >
    | < READING_TIME: "reading_time:" > : FILTER_STATE
    | < CREATED_AT: "created_at:" > : FILTER_STATE
    | < IN_CONTENT: "in_content:" > : FILTER_STATE
    | < IN_TITLE: "in_title:" > : FILTER_STATE
    | < NOT_IN_TITLE: "-in_title:" > : FILTER_STATE
    | < NEGATED_QUOTED: "-" "\"" (~["\""])* "\"" >
    | < QUOTED: "\"" (~["\""])* "\"" >
    | < NEGATED_WORD: "-" (~[" ", "\t", "\n", "\r", ":", ">", "<"])+ >
    | < WORD: (~[" ", "\t", "\n", "\r", ":", ">", "<", "-"])+ >
}

<FILTER_STATE> TOKEN : {
    < GT: ">" > : DEFAULT
    | < LT: "<" > : DEFAULT
    | < RANGE_DOTS: ".." > : DEFAULT
    | < DATE: (["0"-"9"]){2} "/" (["0"-"9"]){2} "/" (["0"-"9"]){4} > : DEFAULT
    | < NUMBER: (["0"-"9"])+ > : DEFAULT
    | < FILTER_QUOTED: "\"" (~["\""])* "\"" > : DEFAULT
    | < FILTER_WORD: (~[" ", "\t", "\n", "\r"])+ > : DEFAULT
}

void Start() : { Token token; }
{
    (
        parseToken()
    )+
}

void parseToken() : { Token token; }
{
    (
        token = <READING_TIME> { ReadingTimeFilter(); }
      | token = <CREATED_AT> { DateFilter(); }
      | token = <IN_TITLE> { InTitleFilter(true); }
      | token = <NOT_IN_TITLE> { InTitleFilter(false); }
      | token = <IN_CONTENT> { InContentFilter(); }
      | token = <QUOTED> {
            String content = token.image.substring(1, token.image.length() - 1);
            this.node.mustInContent.add("\"" + content + "\"");
        }
      | token = <NEGATED_QUOTED> {
            String content = token.image.substring(2, token.image.length() - 1);
            this.node.mustNotContent.add("\"" + content + "\"");
        }
      | token = <NEGATED_WORD> {
            this.node.mustNotContent.add(token.image.substring(1));
        }
      | token = <WORD> {
            this.node.shouldContent += token.image + " ";
        }
    )
}

void DateFilter() : { Token d1 = null, d2 = null; }
{
    (
            <GT> d1 = <DATE> { this.node.minDate = d1.image; }
       |    <LT> d1 = <DATE> { this.node.maxDate = d1.image; }
       | 
            d1 = <DATE>
            [
                <RANGE_DOTS> d2 = <DATE> {
                    this.node.minDate = d1.image;
                    this.node.maxDate = d2.image;
                }
            ]
            {
                if(this.node.minDate.equals("") && this.node.maxDate.equals("")) { 
                    this.node.eqDate = d1.image;
                }
            }
    )
}

void ReadingTimeFilter() : { Token t1 = null, t2 = null; }
{
    (
            <GT> t1 = <NUMBER> { this.node.minReadingTime = t1.image; }
       |    <LT> t1 = <NUMBER> { this.node.maxReadingTime = t1.image; }
       | 
            t1 = <NUMBER>
            [
                <RANGE_DOTS> t2 = <NUMBER> {
                    this.node.minReadingTime = t1.image;
                    this.node.maxReadingTime = t2.image;
                }
            ]
            {
                if(this.node.minReadingTime.equals("") && this.node.maxReadingTime.equals("")) { 
                    this.node.eqReadingTime = t1.image;
                }
            }
    )
}

void InTitleFilter(boolean must) : { Token t1; }
{
        (t1 = <FILTER_WORD> | t1 = <WORD>)
        {
            if (must)
                this.node.mustTitle.add(t1.image);
            else
                this.node.mustNotTitle.add(t1.image);            
        }
    |   (t1 = <FILTER_QUOTED> | t1 = <QUOTED>)
        {
            String content = t1.image.substring(1, t1.image.length() - 1);
            if (must)
                this.node.mustTitle.add("\"" + content + "\"");
            else 
                this.node.mustNotTitle.add("\"" + content + "\"");
        }
}

void InContentFilter() : { Token t1; }
{
        (t1 = <FILTER_WORD> | t1 = <WORD>)
        {
            this.node.mustInContent.add(t1.image);           
        }
    |   (t1 = <FILTER_QUOTED> | t1 = <QUOTED>)
        {
            String content = t1.image.substring(1, t1.image.length() - 1);
            this.node.mustInContent.add("\"" + content + "\"");
        }
}